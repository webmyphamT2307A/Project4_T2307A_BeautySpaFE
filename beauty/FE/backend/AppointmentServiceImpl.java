package com.example.beautyspacms.service.impl;

import com.example.beautyspacms.dto.request.AppointmentCreateRequestDto;
import com.example.beautyspacms.dto.request.AppointmentUpdateRequestDto;
import com.example.beautyspacms.dto.response.AppointmentHistoryDto;
import com.example.beautyspacms.dto.response.AppointmentResponseDto;
import com.example.beautyspacms.entity.Appointment;
import com.example.beautyspacms.entity.Booking;
import com.example.beautyspacms.entity.ServiceHistory;
import com.example.beautyspacms.repository.AppointmentRepository;
import com.example.beautyspacms.repository.BookingRepository;
import com.example.beautyspacms.repository.ServiceHistoryRepository;
import com.example.beautyspacms.service.AppointmentService;
import com.example.beautyspacms.service.EmailService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;
import java.math.BigDecimal;
import java.time.temporal.ChronoUnit;

@Service
@RequiredArgsConstructor
@Slf4j
public class AppointmentServiceImpl implements AppointmentService {
    
    private final AppointmentRepository appointmentRepository;
    private final BookingRepository bookingRepository;
    private final ServiceHistoryRepository serviceHistoryRepository;
    private final EmailService emailService;
    
    private static final String TIMEZONE = "Asia/Ho_Chi_Minh";
    private static final ZoneId ZONE_ID = ZoneId.of(TIMEZONE);

    @Override
    public AppointmentResponseDto createAppointment(AppointmentCreateRequestDto request) {
        // Implementation for create appointment
        // ... existing logic
        return null;
    }

    @Override
    public AppointmentResponseDto findByIdAndIsActive(Long appointmentId) {
        Appointment appointment = appointmentRepository.findByIdAndIsActive(appointmentId, true)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn v·ªõi ID: " + appointmentId));
        return convertToResponseDto(appointment);
    }

    /**
     * H·ª¶Y L·ªäCH H·∫∏N - Implementation ch√≠nh
     */
    @Override
    @Transactional
    public AppointmentResponseDto cancelAppointment(Long appointmentId, String reason) {
        log.info("üö´ B·∫Øt ƒë·∫ßu h·ªßy l·ªãch h·∫πn ID: {}, L√Ω do: {}", appointmentId, reason);
        
        // 1. T√¨m appointment
        Appointment appointment = appointmentRepository.findByIdAndIsActive(appointmentId, true)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn v·ªõi ID: " + appointmentId));
        
        // 2. Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
        if ("cancelled".equalsIgnoreCase(appointment.getStatus())) {
            throw new IllegalArgumentException("L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥");
        }
        
        if ("completed".equalsIgnoreCase(appointment.getStatus())) {
            throw new IllegalArgumentException("Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn ƒë√£ ho√†n th√†nh");
        }
        
        // 3. Ki·ªÉm tra th·ªùi gian (c√≥ th·ªÉ h·ªßy trong ng√†y ho·∫∑c tr∆∞·ªõc ng√†y h·∫πn)
        Instant now = Instant.now();
        if (appointment.getAppointmentDate().isBefore(now.atZone(ZONE_ID).toLocalDate().atStartOfDay(ZONE_ID).toInstant())) {
            // Ch·ªâ kh√¥ng cho h·ªßy n·∫øu ƒë√£ qua ng√†y h·∫πn (kh√¥ng t√≠nh ng√†y hi·ªán t·∫°i)
            throw new IllegalArgumentException("Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn ƒë√£ qua ng√†y");
        }
        
        try {
            // 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i appointment
            String oldStatus = appointment.getStatus();
            appointment.setStatus("cancelled");
            appointment.setNotes(appointment.getNotes() + " | H·ª¶Y: " + reason);
            appointment.setUpdatedAt(now);
            
            // 5. Gi·∫£i ph√≥ng booking slots (t√¨m v√† x√≥a booking li√™n quan)
            List<Booking> relatedBookings = bookingRepository.findByAppointmentId(appointmentId);
            for (Booking booking : relatedBookings) {
                log.info("üóëÔ∏è X√≥a booking ID: {} cho appointment ID: {}", booking.getId(), appointmentId);
                bookingRepository.delete(booking);
            }
            
            // 6. C·∫≠p nh·∫≠t ServiceHistory (n·∫øu c√≥)
            List<ServiceHistory> serviceHistories = serviceHistoryRepository.findByAppointmentId(appointmentId);
            for (ServiceHistory history : serviceHistories) {
                history.setStatus("cancelled");
                history.setNotes(history.getNotes() + " | H·ªßy l·ªãch: " + reason);
                serviceHistoryRepository.save(history);
            }
            
            // 7. L∆∞u appointment ƒë√£ c·∫≠p nh·∫≠t
            Appointment savedAppointment = appointmentRepository.save(appointment);
            log.info("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i appointment t·ª´ '{}' th√†nh 'cancelled'", oldStatus);
            
            // 8. G·ª≠i email th√¥ng b√°o h·ªßy l·ªãch (async)
            try {
                sendCancellationEmail(savedAppointment, reason);
            } catch (Exception emailEx) {
                log.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i email th√¥ng b√°o h·ªßy l·ªãch: {}", emailEx.getMessage());
                // Kh√¥ng throw exception v√¨ vi·ªác h·ªßy l·ªãch ƒë√£ th√†nh c√¥ng
            }
            
            log.info("üéâ H·ªßy l·ªãch h·∫πn th√†nh c√¥ng - ID: {}, L√Ω do: {}", appointmentId, reason);
            return convertToResponseDto(savedAppointment);
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi h·ªßy l·ªãch h·∫πn ID: {}", appointmentId, e);
            throw new RuntimeException("L·ªói h·ªá th·ªëng khi h·ªßy l·ªãch h·∫πn: " + e.getMessage());
        }
    }

    @Override
    @Transactional
    public void updateAppointment(Long appointmentId, AppointmentDto dto) {
        System.out.println("---- B·∫Øt ƒë·∫ßu updateAppointment cho ID: " + appointmentId + " ----");
        System.out.println("DTO nh·∫≠n ƒë∆∞·ª£c: " + dto.toString()); // Gi·∫£ s·ª≠ AppointmentDto c√≥ toString() h·ª£p l√Ω

        Appointment appointment = appointmentRepository.findByIdAndIsActive(appointmentId, true)
                .orElseThrow(() -> {
                    System.err.println("L·ªñI: Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn (ID: " + appointmentId + ") ho·∫∑c l·ªãch h·∫πn kh√¥ng active.");
                    return new RuntimeException("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn (ID: " + appointmentId + ") ho·∫∑c l·ªãch h·∫πn kh√¥ng active.");
                });

        System.out.println("Appointment t√¨m th·∫•y: ID=" + appointment.getId() + ", Status c≈©=" + appointment.getStatus());

        String oldStatus = appointment.getStatus();
        String newStatus = dto.getStatus();
        System.out.println("Status c≈©: " + oldStatus + ", Status m·ªõi t·ª´ DTO: " + newStatus);

        // 1. C·∫≠p nh·∫≠t c√°c th√¥ng tin kh√¥ng ph·∫£i th·ªùi gian t·ª´ DTO
        if (dto.getFullName() != null) {
            System.out.println("Updating fullName: " + dto.getFullName());
            appointment.setFullName(dto.getFullName());
        }
        if (dto.getPhoneNumber() != null) {
            System.out.println("Updating phoneNumber: " + dto.getPhoneNumber());
            appointment.setPhoneNumber(dto.getPhoneNumber());
        }
        if (dto.getNotes() != null) {
            System.out.println("Updating notes: " + dto.getNotes());
            appointment.setNotes(dto.getNotes());
        }
        if (newStatus != null) {
            System.out.println("Updating status to: " + newStatus);
            appointment.setStatus(newStatus);
        }

        // 2. X·ª≠ l√Ω c·∫≠p nh·∫≠t NG√ÄY v√† GI·ªú
        boolean timeChanged = false;
        Instant newBookingStartInstant = appointment.getAppointmentDate(); // Gi·ªØ gi·ªù c≈© l√†m m·∫∑c ƒë·ªãnh
        Integer newDurationMinutes = (appointment.getService() != null && appointment.getService().getDuration() != null)
                ? appointment.getService().getDuration()
                : 60; // L·∫•y duration m·∫∑c ƒë·ªãnh ho·∫∑c t·ª´ service hi·ªán t·∫°i tr∆∞·ªõc

        System.out.println("Th·ªùi gian Appointment hi·ªán t·∫°i (UTC): " + newBookingStartInstant);

        try {
            if (dto.getAppointmentDate() != null && !dto.getAppointmentDate().isEmpty() && dto.getTimeSlotId() != null) {
                System.out.println("Ph√°t hi·ªán y√™u c·∫ßu thay ƒë·ªïi c·∫£ Ng√†y v√† TimeSlot.");
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                LocalDate parsedNewDate = LocalDate.parse(dto.getAppointmentDate(), formatter);
                System.out.println("Parsed new date: " + parsedNewDate);

                Timeslots newTimeSlot = timeSlotsRepository.findById(dto.getTimeSlotId())
                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y TimeSlot m·ªõi v·ªõi ID: " + dto.getTimeSlotId()));
                System.out.println("Found new TimeSlot ID: " + newTimeSlot.getSlotId() + " v·ªõi startTime: " + newTimeSlot.getStartTime());

                LocalTime newSlotStartTime = newTimeSlot.getStartTime();
                if (newSlotStartTime == null) {
                    throw new RuntimeException("TimeSlot m·ªõi kh√¥ng c√≥ th·ªùi gian b·∫Øt ƒë·∫ßu (startTime).");
                }

                LocalDateTime newLocalBookingStartDateTime = parsedNewDate.atTime(newSlotStartTime);
                newBookingStartInstant = newLocalBookingStartDateTime.atZone(ZoneId.of("Asia/Ho_Chi_Minh")).toInstant();
                timeChanged = true;
                appointment.setTimeSlot(newTimeSlot);
                System.out.println("Th·ªùi gian Appointment M·ªöI (thay ƒë·ªïi c·∫£ Ng√†y v√† Slot) (UTC): " + newBookingStartInstant);

            } else if (dto.getAppointmentDate() != null && !dto.getAppointmentDate().isEmpty()) {
                System.out.println("Ph√°t hi·ªán y√™u c·∫ßu ch·ªâ thay ƒë·ªïi Ng√†y.");
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                LocalDate parsedNewDate = LocalDate.parse(dto.getAppointmentDate(), formatter);
                System.out.println("Parsed new date: " + parsedNewDate);

                LocalTime currentSlotStartTime = appointment.getTimeSlot().getStartTime();
                System.out.println("Gi·ªØ nguy√™n startTime t·ª´ TimeSlot c≈©: " + currentSlotStartTime);

                LocalDateTime newLocalBookingStartDateTime = parsedNewDate.atTime(currentSlotStartTime);
                newBookingStartInstant = newLocalBookingStartDateTime.atZone(ZoneId.of("Asia/Ho_Chi_Minh")).toInstant();
                timeChanged = true;
                System.out.println("Th·ªùi gian Appointment M·ªöI (ch·ªâ thay ƒë·ªïi Ng√†y) (UTC): " + newBookingStartInstant);

            } else if (dto.getTimeSlotId() != null && (appointment.getTimeSlot() == null || !dto.getTimeSlotId().equals(appointment.getTimeSlot().getSlotId()))) {
                System.out.println("Ph√°t hi·ªán y√™u c·∫ßu ch·ªâ thay ƒë·ªïi TimeSlot.");
                Timeslots newTimeSlot = timeSlotsRepository.findById(dto.getTimeSlotId())
                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y TimeSlot m·ªõi v·ªõi ID: " + dto.getTimeSlotId()));
                System.out.println("Found new TimeSlot ID: " + newTimeSlot.getSlotId() + " v·ªõi startTime: " + newTimeSlot.getStartTime());

                LocalTime newSlotStartTime = newTimeSlot.getStartTime();
                LocalDate currentAppointmentDatePart = LocalDateTime.ofInstant(appointment.getAppointmentDate(), ZoneId.of("Asia/Ho_Chi_Minh")).toLocalDate();
                System.out.println("Gi·ªØ nguy√™n DatePart t·ª´ Appointment c≈©: " + currentAppointmentDatePart);

                LocalDateTime newLocalBookingStartDateTime = currentAppointmentDatePart.atTime(newSlotStartTime);
                newBookingStartInstant = newLocalBookingStartDateTime.atZone(ZoneId.of("Asia/Ho_Chi_Minh")).toInstant();
                timeChanged = true;
                appointment.setTimeSlot(newTimeSlot);
                System.out.println("Th·ªùi gian Appointment M·ªöI (ch·ªâ thay ƒë·ªïi Slot) (UTC): " + newBookingStartInstant);
            }
        } catch (DateTimeParseException e) {
            System.err.println("L·ªñI PARSE DATE: " + e.getMessage());
            throw new RuntimeException("ƒê·ªãnh d·∫°ng ng√†y th√°ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng dd/MM/yyyy.", e);
        } catch (RuntimeException e) {
            System.err.println("L·ªñI RUNTIME khi x·ª≠ l√Ω ng√†y/gi·ªù: " + e.getMessage());
            throw e; // N√©m l·∫°i l·ªói ƒë·ªÉ controller c√≥ th·ªÉ b·∫Øt v√† tr·∫£ v·ªÅ 400 ho·∫∑c 500
        }

        // C·∫≠p nh·∫≠t Service n·∫øu c√≥ thay ƒë·ªïi
        boolean serviceChanged = false;
        if (dto.getServiceId() != null && (appointment.getService() == null || !dto.getServiceId().equals(appointment.getService().getId().longValue()))) {
            System.out.println("Ph√°t hi·ªán y√™u c·∫ßu thay ƒë·ªïi Service. Old Service ID: " + (appointment.getService() != null ? appointment.getService().getId() : "null") + ", New Service ID: " + dto.getServiceId());
            org.aptech.backendmypham.models.Service newService = serviceRepository.findById(Math.toIntExact(dto.getServiceId()))
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y Service v·ªõi ID: " + dto.getServiceId()));
            appointment.setService(newService);
            serviceChanged = true;
            System.out.println("ƒê√£ c·∫≠p nh·∫≠t Service sang ID: " + newService.getId());
        }

        // X√°c ƒë·ªãnh durationMinutes (c·∫ßn ƒë∆∞·ª£c t√≠nh to√°n l·∫°i n·∫øu service ho·∫∑c DTO c√≥ duration)
        if (serviceChanged && appointment.getService() != null && appointment.getService().getDuration() != null) {
            newDurationMinutes = appointment.getService().getDuration();
            System.out.println("Duration ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ Service m·ªõi: " + newDurationMinutes + " ph√∫t");
        } else if (dto.getDurationMinutes() != null && dto.getDurationMinutes() > 0) {
            newDurationMinutes = dto.getDurationMinutes();
            System.out.println("Duration ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ DTO: " + newDurationMinutes + " ph√∫t");
        } else if (appointment.getService() != null && appointment.getService().getDuration() != null) {
            // N·∫øu service kh√¥ng ƒë·ªïi v√† DTO kh√¥ng c√≥ duration, d√πng duration c·ªßa service hi·ªán t·∫°i
            newDurationMinutes = appointment.getService().getDuration();
        } else {
            Booking oldBooking = null;
            if(appointment.getUser() != null && appointment.getService() != null){
                List<Booking> bookings = bookingRepository.findByUserIdAndServiceIdAndBookingDateTimeAndIsActiveTrue(appointment.getUser().getId(), appointment.getService().getId(), appointment.getAppointmentDate());
                if(!bookings.isEmpty()) oldBooking = bookings.get(0); // L·∫•y booking ƒë·∫ßu ti√™n kh·ªõp
            }
            newDurationMinutes = (oldBooking != null && oldBooking.getDurationMinutes() != null) ? oldBooking.getDurationMinutes() : 60;
            System.out.println("Duration gi·ªØ nguy√™n ho·∫∑c m·∫∑c ƒë·ªãnh: " + newDurationMinutes + " ph√∫t");
        }


        if (timeChanged) { // N·∫øu th·ªùi gian h·∫πn th·ª±c s·ª± thay ƒë·ªïi (ng√†y ho·∫∑c gi·ªù)
            appointment.setAppointmentDate(newBookingStartInstant);
            appointment.setEndTime(newBookingStartInstant.plus(newDurationMinutes, ChronoUnit.MINUTES));
            System.out.println("ƒê√£ set AppointmentDate (UTC): " + appointment.getAppointmentDate());
            System.out.println("ƒê√£ set EndTime (UTC): " + appointment.getEndTime());
        }

        // C·∫≠p nh·∫≠t User (nh√¢n vi√™n) n·∫øu c√≥ thay ƒë·ªïi
        User staffToBook = appointment.getUser(); // Nh√¢n vi√™n hi·ªán t·∫°i
        boolean staffChanged = false;

        // LOGIC ƒê√É S·ª¨A: X·ª≠ l√Ω g√°n/b·ªè g√°n nh√¢n vi√™n d·ª±a tr√™n tr·∫°ng th√°i m·ªõi
        if ("cancelled".equalsIgnoreCase(newStatus)) {
            // 1. KHI H·ª¶Y L·ªäCH: Lu√¥n b·ªè g√°n nh√¢n vi√™n ƒë·ªÉ gi·∫£i ph√≥ng l·ªãch.
            if (staffToBook != null) {
                System.out.println("Tr·∫°ng th√°i l√† 'cancelled'. T·ª± ƒë·ªông b·ªè g√°n nh√¢n vi√™n ID: " + staffToBook.getId());
                appointment.setUser(null);
                staffToBook = null; // C·∫≠p nh·∫≠t bi·∫øn t·∫°m th·ªùi ƒë·ªÉ logic ki·ªÉm tra sau n√†y hi·ªÉu ƒë√∫ng.
                staffChanged = true;
            }
        } else if ("completed".equalsIgnoreCase(newStatus)) {
            // 2. KHI HO√ÄN TH√ÄNH: Gi·ªØ l·∫°i nh√¢n vi√™n ƒë√£ th·ª±c hi·ªán.
            // N·∫øu DTO c√≥ g·ª≠i l√™n userId m·ªõi (tr∆∞·ªùng h·ª£p admin s·ª≠a) th√¨ c·∫≠p nh·∫≠t.
            // N·∫øu kh√¥ng th√¨ KH√îNG l√†m g√¨ c·∫£, gi·ªØ nguy√™n nh√¢n vi√™n c≈©.
            System.out.println("Tr·∫°ng th√°i l√† 'completed'. S·∫Ω gi·ªØ l·∫°i th√¥ng tin nh√¢n vi√™n.");
            if (dto.getUserId() != null && (staffToBook == null || !dto.getUserId().equals(staffToBook.getId()))) {
                staffToBook = userRepository.findById(dto.getUserId())
                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y User (nh√¢n vi√™n) v·ªõi ID: " + dto.getUserId()));
                appointment.setUser(staffToBook);
                staffChanged = true;
                System.out.println("ƒê√£ c·∫≠p nh·∫≠t User sang ID: " + staffToBook.getId() + " cho l·ªãch h·∫πn ƒë√£ ho√†n th√†nh.");
            } else {
                System.out.println("Kh√¥ng c√≥ userId m·ªõi trong DTO ho·∫∑c userId kh√¥ng ƒë·ªïi. Gi·ªØ nguy√™n nh√¢n vi√™n hi·ªán t·∫°i: " + (staffToBook != null ? staffToBook.getId() : "null"));
            }
        } else {
            // 3. C√ÅC TR·∫†NG TH√ÅI KH√ÅC (pending, confirmed...): X·ª≠ l√Ω g√°n/b·ªè g√°n t·ª´ DTO nh∆∞ b√¨nh th∆∞·ªùng.
            if (dto.getUserId() != null) {
                // G√°n nh√¢n vi√™n m·ªõi
                if (staffToBook == null || !dto.getUserId().equals(staffToBook.getId())) {
                    staffToBook = userRepository.findById(dto.getUserId())
                            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y User (nh√¢n vi√™n) v·ªõi ID: " + dto.getUserId()));
                    appointment.setUser(staffToBook);
                    staffChanged = true;
                    System.out.println("ƒê√£ c·∫≠p nh·∫≠t User sang ID: " + staffToBook.getId());
                }
            } else { // dto.getUserId() l√† null -> Y√™u c·∫ßu b·ªè g√°n t∆∞·ªùng minh t·ª´ frontend
                if (staffToBook != null) {
                    appointment.setUser(null);
                    staffToBook = null;
                    staffChanged = true;
                    System.out.println("DTO y√™u c·∫ßu b·ªè g√°n User (nh√¢n vi√™n) cho tr·∫°ng th√°i '" + newStatus + "'.");
                }
            }
        }

        // 3. KI·ªÇM TRA NH√ÇN VI√äN R·∫¢NH (N·∫æU TH·ªúI GIAN HO·∫∂C NH√ÇN VI√äN HO·∫∂C D·ªäCH V·ª§ THAY ƒê·ªîI)
        boolean recheckStaffAvailability = timeChanged || staffChanged || serviceChanged;
        System.out.println("C·∫ßn ki·ªÉm tra l·∫°i l·ªãch nh√¢n vi√™n kh√¥ng? " + recheckStaffAvailability);

        if (recheckStaffAvailability && staffToBook != null) {
            System.out.println("ƒêang ki·ªÉm tra l·ªãch r·∫£nh cho User ID: " + staffToBook.getId() +
                    " v√†o l√∫c (UTC): " + appointment.getAppointmentDate() +
                    " v·ªõi duration: " + newDurationMinutes +
                    " (Lo·∫°i tr·ª´ Appointment ID: " + appointmentId + ")");
            boolean staffIsActuallyAvailable = bookingService.isStaffAvailable(
                    staffToBook.getId(),
                    appointment.getAppointmentDate(),
                    newDurationMinutes,
                    appointmentId
            );
            if (!staffIsActuallyAvailable) {
                String localTimeDisplay = LocalDateTime.ofInstant(appointment.getAppointmentDate(), ZoneId.of("Asia/Ho_Chi_Minh"))
                        .format(DateTimeFormatter.ofPattern("HH:mm dd/MM/yyyy"));
                System.err.println("L·ªñI: Nh√¢n vi√™n " + staffToBook.getFullName() + " ƒë√£ c√≥ l·ªãch v√†o th·ªùi ƒëi·ªÉm n√†y (" + localTimeDisplay + " gi·ªù VN).");
                throw new RuntimeException("Nh√¢n vi√™n " + staffToBook.getFullName() +
                        " ƒë√£ c√≥ l·ªãch v√†o th·ªùi ƒëi·ªÉm n√†y (" + localTimeDisplay +
                        "). Vui l√≤ng ch·ªçn th·ªùi gian ho·∫∑c nh√¢n vi√™n kh√°c.");
            }
            System.out.println("Ki·ªÉm tra OK: Nh√¢n vi√™n " + staffToBook.getFullName() + " r·∫£nh.");
        }

        appointment.setUpdatedAt(Instant.now());
        System.out.println("Chu·∫©n b·ªã l∆∞u Appointment: " + appointment.toString()); // Gi·∫£ s·ª≠ Appointment c√≥ toString()
        Appointment savedAppointment = appointmentRepository.save(appointment);
        System.out.println("ƒê√£ l∆∞u Appointment ID: " + savedAppointment.getId());

        // 4. C·∫¨P NH·∫¨T HO·∫∂C V√î HI·ªÜU H√ìA BOOKING LI√äN QUAN

        boolean isFinalStatus = "completed".equalsIgnoreCase(newStatus) || "cancelled".equalsIgnoreCase(newStatus);
        System.out.println("Tr·∫°ng th√°i cu·ªëi c√πng (completed/cancelled)? " + isFinalStatus);
        System.out.println("Tr·∫°ng th√°i c√≥ th·ª±c s·ª± thay ƒë·ªïi sang final kh√¥ng? " +
                (isFinalStatus && !(oldStatus != null && (oldStatus.equalsIgnoreCase("completed") || oldStatus.equalsIgnoreCase("cancelled")))));

        if (isFinalStatus && !(oldStatus != null && (oldStatus.equalsIgnoreCase("completed") || oldStatus.equalsIgnoreCase("cancelled")))) {
            User currentStaff = savedAppointment.getUser();
            Instant currentAppointmentTime = savedAppointment.getAppointmentDate();
            org.aptech.backendmypham.models.Service currentService = savedAppointment.getService();

            if (currentStaff != null && currentAppointmentTime != null && currentService != null) {
                System.out.println("ƒêang t√¨m Booking ƒë·ªÉ v√¥ hi·ªáu h√≥a: UserID=" + currentStaff.getId() +
                        ", ServiceID=" + currentService.getId() +
                        ", AppointmentTime(UTC)=" + currentAppointmentTime);

                List<Booking> bookingsToDeactivate = bookingRepository
                        .findByUserIdAndServiceIdAndBookingDateTimeAndIsActiveTrue(
                                currentStaff.getId(),
                                currentService.getId(),
                                currentAppointmentTime
                        );
                System.out.println("T√¨m th·∫•y " + bookingsToDeactivate.size() + " booking(s) ƒë·ªÉ v√¥ hi·ªáu h√≥a.");

                for (Booking booking : bookingsToDeactivate) {
                    booking.setIsActive(false);
                    booking.setStatus(newStatus);
                    booking.setUpdatedAt(Instant.now());
                    bookingRepository.save(booking);
                    System.out.println("INFO: (Update) ƒê√£ v√¥ hi·ªáu h√≥a Booking ID: " + booking.getId() + " cho Appointment ID: " + savedAppointment.getId());
                }
            } else {
                System.out.println("WARN: Kh√¥ng ƒë·ªß th√¥ng tin (User/Service/AppointmentTime) ƒë·ªÉ t√¨m Booking c·∫ßn v√¥ hi·ªáu h√≥a cho Appointment ID: " + savedAppointment.getId());
            }
        }
        System.out.println("---- K·∫øt th√∫c updateAppointment cho ID: " + appointmentId + " ----");
    }

    @Override
    @Transactional
    public void deleteAppointment(Long Aid) {
        // ... existing code ...
    }

    @Override
    public List<AppointmentResponseDto> getAllAppointments() {
        List<Appointment> appointments = appointmentRepository.findByIsActiveOrderByCreatedAtDesc(true);
        return appointments.stream()
                .map(this::convertToResponseDto)
                .collect(Collectors.toList());
    }

    @Override
    public List<AppointmentResponseDto> getAppointmentsByUserId(Long userId) {
        List<Appointment> appointments = appointmentRepository.findByUserIdAndIsActiveOrderByAppointmentDateDesc(userId, true);
        return appointments.stream()
                .map(this::convertToResponseDto)
                .collect(Collectors.toList());
    }

    @Override
    public Map<String, List<AppointmentResponseDto>> getTodayAppointmentsGrouped() {
        LocalDate today = LocalDate.now(ZONE_ID);
        Instant startOfDay = today.atStartOfDay(ZONE_ID).toInstant();
        Instant endOfDay = today.plusDays(1).atStartOfDay(ZONE_ID).toInstant();
        
        List<Appointment> todayAppointments = appointmentRepository.findByAppointmentDateBetweenAndIsActiveOrderByAppointmentDate(
                startOfDay, endOfDay, true);
        
        return todayAppointments.stream()
                .map(this::convertToResponseDto)
                .collect(Collectors.groupingBy(apt -> apt.getSlot()));
    }

    @Override
    public List<AppointmentHistoryDto> getAppointmentHistoryByCustomerId(Long customerId) {
        List<Appointment> appointments = appointmentRepository.findByCustomerIdAndIsActiveOrderByAppointmentDateDesc(customerId, true);
        return appointments.stream()
                .map(this::convertToAppointmentHistoryDto)
                .collect(Collectors.toList());
    }

    @Override
    public List<AppointmentHistoryDTO> getAppointmentHistoryByPhone(String phoneNumber) {
        List<Appointment> appointments = appointmentRepository.findByPhoneNumberWithDetailsOrderByCreatedAtDesc(phoneNumber, null);
        return appointments.stream()
                .map(this::convertToAppointmentHistoryDTO)
                .collect(Collectors.toList());
    }

    @Override
    public Map<String, Object> getCustomerStats(Long customerId) {
        List<Appointment> appointments = appointmentRepository.findByCustomerIdAndIsActive(customerId, true);
        
        long totalAppointments = appointments.size();
        long completedAppointments = appointments.stream()
                .filter(apt -> "completed".equalsIgnoreCase(apt.getStatus()))
                .count();
        
        double totalSpent = appointments.stream()
                .filter(apt -> "completed".equalsIgnoreCase(apt.getStatus()))
                .mapToDouble(apt -> apt.getPrice() != null ? apt.getPrice().doubleValue() : 0.0)
                .sum();
        
        Map<String, Object> stats = new HashMap<>();
        stats.put("totalAppointments", totalAppointments);
        stats.put("completedAppointments", completedAppointments);
        stats.put("totalSpent", totalSpent);
        
        return stats;
    }

    /**
     * G·ª≠i email th√¥ng b√°o h·ªßy l·ªãch
     */
    private void sendCancellationEmail(Appointment appointment, String reason) {
        try {
            String customerEmail = appointment.getCustomer() != null ? 
                appointment.getCustomer().getEmail() : null;
            
            if (customerEmail == null || customerEmail.trim().isEmpty()) {
                log.warn("‚ö†Ô∏è Kh√¥ng c√≥ email kh√°ch h√†ng ƒë·ªÉ g·ª≠i th√¥ng b√°o h·ªßy l·ªãch");
                return;
            }
            
            String subject = "Th√¥ng b√°o h·ªßy l·ªãch h·∫πn - Beauty Spa";
            String serviceName = appointment.getService() != null ? 
                appointment.getService().getName() : "N/A";
            String appointmentDate = appointment.getAppointmentDate()
                .atZone(ZONE_ID)
                .format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            String slot = appointment.getSlot() != null ? appointment.getSlot() : "N/A";
            
            String body = String.format(
                "K√≠nh ch√†o %s,\n\n" +
                "Ch√∫ng t√¥i xin th√¥ng b√°o l·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy:\n\n" +
                "üìÖ Ng√†y h·∫πn: %s\n" +
                "üïê Gi·ªù: %s\n" +
                "üíÑ D·ªãch v·ª•: %s\n" +
                "üìù L√Ω do h·ªßy: %s\n\n" +
                "Ch√∫ng t√¥i r·∫•t ti·∫øc v√¨ s·ª± b·∫•t ti·ªán n√†y. " +
                "B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch m·ªõi b·∫•t c·ª© l√∫c n√†o qua website ho·∫∑c li√™n h·ªá hotline.\n\n" +
                "Tr√¢n tr·ªçng,\n" +
                "Beauty Spa Team",
                appointment.getFullName(),
                appointmentDate,
                slot,
                serviceName,
                reason
            );
            
            emailService.sendSimpleEmail(customerEmail, subject, body);
            log.info("üìß ƒê√£ g·ª≠i email th√¥ng b√°o h·ªßy l·ªãch ƒë·∫øn: {}", customerEmail);
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i email th√¥ng b√°o h·ªßy l·ªãch: {}", e.getMessage());
        }
    }

    /**
     * Convert Appointment entity to ResponseDto
     */
    private AppointmentResponseDto convertToResponseDto(Appointment appointment) {
        AppointmentResponseDto dto = new AppointmentResponseDto();
        dto.setId(appointment.getId());
        dto.setFullName(appointment.getFullName());
        dto.setPhoneNumber(appointment.getPhoneNumber());
        dto.setAppointmentDate(appointment.getAppointmentDate());
        dto.setStatus(appointment.getStatus());
        dto.setSlot(appointment.getSlot());
        dto.setNotes(appointment.getNotes());
        dto.setPrice(appointment.getPrice());
        dto.setCreatedAt(appointment.getCreatedAt());
        dto.setUpdatedAt(appointment.getUpdatedAt());
        
        // Set service info
        if (appointment.getService() != null) {
            dto.setServiceId(appointment.getService().getId());
            dto.setServiceName(appointment.getService().getName());
        }
        
        // Set user info
        if (appointment.getUser() != null) {
            dto.setUserId(appointment.getUser().getId());
            dto.setUserName(appointment.getUser().getFullName());
        }
        
        // Set customer info
        if (appointment.getCustomer() != null) {
            dto.setCustomerId(appointment.getCustomer().getId());
        }
        
        return dto;
    }

    /**
     * Convert Appointment entity to AppointmentHistoryDto
     */
    private AppointmentHistoryDto convertToAppointmentHistoryDto(Appointment appointment) {
        AppointmentHistoryDto dto = new AppointmentHistoryDto();
        dto.setAppointmentId(appointment.getId());
        dto.setFullName(appointment.getFullName());
        dto.setPhoneNumber(appointment.getPhoneNumber());
        dto.setServicePrice(appointment.getPrice());
        dto.setStatus(appointment.getStatus());
        dto.setSlot(appointment.getSlot());
        dto.setNotes(appointment.getNotes());
        
        // Format appointment date
        if (appointment.getAppointmentDate() != null) {
            String formattedDate = appointment.getAppointmentDate()
                .atZone(ZONE_ID)
                .format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            dto.setAppointmentDate(formattedDate);
            dto.setDisplayDate(formattedDate);
        }
        
        // Set service info
        if (appointment.getService() != null) {
            dto.setServiceId(appointment.getService().getId());
            dto.setServiceName(appointment.getService().getName());
        }
        
        // Set user info
        if (appointment.getUser() != null) {
            dto.setUserId(appointment.getUser().getId());
            dto.setUserName(appointment.getUser().getFullName());
        }
        
        return dto;
    }

    @Override
    public AppointmentStatsDTO getCustomerAppointmentStats(Long customerId) {
        List<Appointment> allAppointments = appointmentRepository.findByCustomerIdAndIsActive(customerId, null);

        Long total = (long) allAppointments.size();
        Long completed = allAppointments.stream().filter(apt -> "ƒê√£ ho√†n th√†nh".equals(determineStatusText(apt))).count();
        Long cancelled = allAppointments.stream().filter(apt -> "ƒê√£ h·ªßy".equals(determineStatusText(apt))).count();
        Long upcoming = total - completed - cancelled;

        BigDecimal totalSpent = allAppointments.stream()
                .filter(apt -> "ƒê√£ ho√†n th√†nh".equals(determineStatusText(apt)))
                .map(Appointment::getPrice)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        AppointmentStatsDTO statsDTO = new AppointmentStatsDTO();
        statsDTO.setTotalAppointments(total);
        statsDTO.setCompletedAppointments(completed);
        statsDTO.setCancelledAppointments(cancelled);
        statsDTO.setUpcomingAppointments(upcoming);
        statsDTO.setTotalSpent(totalSpent);

        return statsDTO;
    }

    private String determineStatusText(Appointment appointment) {
        // PRIORITY 1: Check explicit status from backend first
        if (appointment.getStatus() != null) {
            String status = appointment.getStatus().toLowerCase().trim();
            switch (status) {
                case "cancelled":
                    return "ƒê√£ h·ªßy";
                case "completed":
                    return "ƒê√£ ho√†n th√†nh";
                case "confirmed":
                    return "ƒê√£ x√°c nh·∫≠n";
                // Let "pending" fall through to date-based logic
            }
        }

        // PRIORITY 2: Date-based logic for other statuses
        LocalDate today = LocalDate.now(ZoneId.of("Asia/Ho_Chi_Minh"));
        LocalDate aptDate = appointment.getAppointmentDate()
                .atZone(ZoneId.of("Asia/Ho_Chi_Minh"))
                .toLocalDate();

        if (aptDate.isBefore(today)) {
            return "ƒê√£ ho√†n th√†nh"; // Past appointments, even pending, are considered "completed"
        }

        if (aptDate.isEqual(today)) {
            return "H√¥m nay"; // All appointments today are "H√¥m nay" unless explicitly cancelled/completed
        }

        // Future appointments
        if (appointment.getStatus() != null && "pending".equalsIgnoreCase(appointment.getStatus())) {
            return "Ch·ªù x√°c nh·∫≠n";
        }

        // Default for future appointments that are not pending (e.g., if we add more statuses)
        return "S·∫Øp t·ªõi";
    }

    private String determineStatusClassName(Appointment appointment) {
        String statusText = determineStatusText(appointment);
        switch (statusText) {
            case "ƒê√£ h·ªßy":
                return "bg-danger";
            case "ƒê√£ ho√†n th√†nh":
                return "bg-success";
            case "ƒê√£ x√°c nh·∫≠n":
                return "bg-primary";
            case "H√¥m nay":
                return "bg-warning text-dark";
            case "Ch·ªù x√°c nh·∫≠n":
                return "bg-secondary";
            case "S·∫Øp t·ªõi":
            default:
                return "bg-info";
        }
    }

    private AppointmentHistoryDTO convertToAppointmentHistoryDTO(Appointment appointment) {
        return AppointmentHistoryDTO.builder()
                .appointmentId(appointment.getId())
                .fullName(appointment.getFullName())
                .phoneNumber(appointment.getPhoneNumber())
                .servicePrice(appointment.getPrice())
                .status(appointment.getStatus())
                .slot(appointment.getSlot())
                .notes(appointment.getNotes())
                .appointmentDate(DateTimeFormatter.ofPattern("EEEE, dd/MM/yyyy", new Locale("vi", "VN"))
                        .withZone(ZoneId.of("Asia/Ho_Chi_Minh"))
                        .format(appointment.getAppointmentDate()))
                .build();
    }

    @Override
    public List<AppointmentResponseDto> getALlAppointment() {
        // ... existing code ...
        return null;
    }
} 